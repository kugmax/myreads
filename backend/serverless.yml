service:
  name: my-reads-app

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing

provider:
  name: aws
  runtime: nodejs10.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-1'}

  tracing:
    lambda: true
    apiGateway: true
    iamRoleStatements:
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  environment:
    USER_BOOKS_TABLE: user-books-${self:provider.stage}
    USER_BOOKS_BOOKID_INDX: user-books-bookid-indx-${self:provider.stage}
    BOOKS_COVER_BUCKET: user-books-cover-${self:provider.stage}
    BOOKS_COVER_URL_EXP_SECONDS: 300
    JWKS_URL: https://dev-tpqi4clb.auth0.com/.well-known/jwks.json
 
custom:
  serverless-offline:
    port: 3003

  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true

  documentation:
    api:
      info:
        version: v1.0.0
        title: Book API
        description: MyReads app
#        TODO: need to impl
    models:
      - name: SaveBookRequest
        contentType: application/json
        schema: ${file(api/create-book-request.json)}
      - name: ChangeBookStatusRequest
        contentType: application/json
        schema: ${file(api/change-status-request.json)}

#TODO: need to add search using elasticksearch
#TODO: need to have unit test
#TODO: need to have integration tests using postman
#TODO: in client use steps to create book: create entity -> upload cover
#TODO: need to use build per lambda
#TODO: need to check req validation body
functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetBooks:
    handler: src/lambda/http/getBooks.handler
    events:
      - http:
          method: get
          path: books
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_BOOKS_TABLE}/index/${self:provider.environment.USER_BOOKS_BOOKID_INDX}

  GetBook:
    handler: src/lambda/http/getBook.handler
    events:
      - http:
          method: get
          path: books/{bookId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_BOOKS_TABLE}/index/${self:provider.environment.USER_BOOKS_BOOKID_INDX}

  CreateBook:
    handler: src/lambda/http/createBook.handler
    events:
      - http:
          method: post
          path: books
          cors: true
          authorizer: Auth
          reqValidatorName: BodyBookRequestValidator
          documentation:
            summary: Create a new book
            description: Create a new book
            requestModels:
              'application/json': SaveBookRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_BOOKS_TABLE}

  UpdateBook:
    handler: src/lambda/http/updateBook.handler
    events:
      - http:
          method: patch
          path: books/{bookId}
          cors: true
          authorizer: Auth
          reqValidatorName: BodyBookRequestValidator
          documentation:
            summary: Update a new book
            description: Update a new book
            requestModels:
              'application/json': SaveBookRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_BOOKS_TABLE}/index/${self:provider.environment.USER_BOOKS_BOOKID_INDX}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_BOOKS_TABLE}

  ChangeBookStatus:
    handler: src/lambda/http/changeBookStatus.handler
    events:
      - http:
          method: patch
          path: books/{bookId}/changeStatus
          cors: true
          authorizer: Auth
          reqValidatorName: BodyBookRequestValidator
          documentation:
            summary: Change user book status
            description: Change user book status
            requestModels:
              'application/json': ChangeBookStatusRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_BOOKS_TABLE}/index/${self:provider.environment.USER_BOOKS_BOOKID_INDX}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_BOOKS_TABLE}

  DeleteBook:
    handler: src/lambda/http/deleteBook.handler
    events:
      - http:
          method: delete
          path: books/{bookId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_BOOKS_TABLE}/index/${self:provider.environment.USER_BOOKS_BOOKID_INDX}
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_BOOKS_TABLE}

  GenerateUploadBookCoverUrl:
    handler: src/lambda/http/generateUploadBookCoverUrl.handler
    events:
      - http:
          method: post
          path: books/{bookId}/cover
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.BOOKS_COVER_BUCKET}/*

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    BodyBookRequestValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false      

    UserBooksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: bookId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USER_BOOKS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_BOOKS_BOOKID_INDX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: bookId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    BooksCoverBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.BOOKS_COVER_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BooksCoberBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: BooksCoberBucketPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.BOOKS_COVER_BUCKET}/*'
        Bucket: !Ref BooksCoverBucket